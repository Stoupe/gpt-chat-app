import { type NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { type FormEvent, useState } from "react";
import ReactMarkdown from "react-markdown";
import { api } from "~/utils/api";

const ChatPage: NextPage = () => {
  //Get chat id from url path (nextjs)
  const { query, replace } = useRouter();
  const chatId = query.chatId as string;

  const utils = api.useContext();
  const session = useSession();
  const [input, setInput] = useState("");

  const {
    data: chat,
    isLoading: isLoadingMessages,
    isError,
  } = api.message.getAll.useQuery(
    { chatId },
    {
      onError: () => {
        console.log("on error");
        void replace("/");
      },
    }
  );

  // const [response, setResponse] = useState("");

  // const { mutate: submitMessage, isLoading: isCreatingMessage } =
  //   api.openai.createChatCompletion.useMutation({
  //     onSettled: () => {
  //       setInput("");
  //       void refetchMessages();
  //     },
  //   });

  // const submitNew = api.openai.create.useMutation();
  // const submitSub = api.openai.onCreate.useSubscription(undefined, {
  //   onData: (data) => {
  //     console.log("onData", data);
  //   },
  // });

  const { mutate: deleteChat } = api.chat.delete.useMutation({
    onSettled: async () => {
      await replace("/");
      void utils.chat.getAll.invalidate();
    },
  });

  // const [generatedBios, setGeneratedBios] = useState("");
  // const [loading, setLoading] = useState(false);

  const [chatResponse, setChatResponse] = useState("");
  const [isStreamingChatResponse, setIsStreamingChatResponse] = useState(false);

  const generateChatResponse = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setChatResponse("");
    setIsStreamingChatResponse(true);

    console.log("sending request");

    const response = await fetch("/api/generate", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify([{ role: "user", content: input.trim() }]),
    });

    console.log("got response");

    if (!response.ok) {
      console.error(response);
      throw new Error(response.statusText);
    }

    const data = response.body;
    if (!data) {
      return;
    }
    const reader = data.getReader();
    const decoder = new TextDecoder();
    let done = false;

    while (!done) {
      const { value, done: doneReading } = await reader.read();
      done = doneReading;
      const chunkValue = decoder.decode(value);
      setChatResponse((prev) => prev + chunkValue);
    }

    setIsStreamingChatResponse(false);
  };

  if (!session) {
    return null;
  }

  if (isError) {
    return <div>error loading messages</div>;
  }

  if (!chat && isLoadingMessages) {
    return <div className="loading btn-ghost btn p-5" />;
  }

  return (
    <>
      <Head>
        <title>Chat {chatId}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex  max-h-screen w-full flex-col p-5">
        <h1 className="text-xl font-bold">{chat.name}</h1>

        <div className="grow overflow-y-scroll">
          {chat.messages.map((message) => (
            <div className="p-4" key={message.id}>
              <p className="font-bold">{message.role}</p>
              <span className="prose">
                <ReactMarkdown>{message.content}</ReactMarkdown>
              </span>
            </div>
          ))}
          <div className="p-4">
            <p className="font-bold">Response</p>
            <span className="prose">
              <ReactMarkdown>{chatResponse}</ReactMarkdown>
            </span>
          </div>
        </div>

        <form
          onSubmit={(e) => {
            e.preventDefault();
            if (!chatId) return;
            void generateChatResponse(e);
          }}
          className="form-control flex flex-row gap-4"
        >
          <textarea
            className="input textarea-bordered textarea w-full"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            disabled={isStreamingChatResponse}
          />
          <button
            disabled={isStreamingChatResponse}
            className={`btn-outline ${
              isStreamingChatResponse ? "loading" : ""
            } btn`}
            type="submit"
          >
            send
          </button>
          <button
            onClick={(e) => {
              e.preventDefault();
              if (!chatId) return;
              void deleteChat({ chatId });
            }}
            className="btn-error btn"
            disabled={isStreamingChatResponse}
          >
            Delete Chat
          </button>
        </form>
      </div>
    </>
  );
};

export default ChatPage;
